/* tslint:disable */
/* eslint-disable */
/**
 * backlog api
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Oauth2TokenCodeRequest
 */
export interface Oauth2TokenCodeRequest {
    /**
     * 値は”authorization_code”で固定
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    grant_type: Oauth2TokenCodeRequestGrantTypeEnum;
    /**
     * 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    code: string;
    /**
     * 認可エンドポイントで指定した場合は必須
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    redirect_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    client_id: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    client_secret: string;
}

/**
    * @export
    * @enum {string}
    */
export enum Oauth2TokenCodeRequestGrantTypeEnum {
    AuthorizationCode = 'authorization_code'
}

/**
 * 
 * @export
 * @interface Oauth2TokenRefleshRequest
 */
export interface Oauth2TokenRefleshRequest {
    /**
     * 値は”refresh_token”で固定
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    grant_type: Oauth2TokenRefleshRequestGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    client_id: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    client_secret: string;
}

/**
    * @export
    * @enum {string}
    */
export enum Oauth2TokenRefleshRequestGrantTypeEnum {
    RefreshToken = 'refresh_token'
}

/**
 * 
 * @export
 * @interface Oauth2TokenRequest
 */
export interface Oauth2TokenRequest {
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    grant_type: Oauth2TokenRequestGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    client_id: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    client_secret: string;
    /**
     * 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    code?: string;
    /**
     * 認可エンドポイントで指定した場合は必須
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    redirect_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequest
     */
    refresh_token?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum Oauth2TokenRequestGrantTypeEnum {
    AuthorizationCode = 'authorization_code',
    RefreshToken = 'refresh_token'
}

/**
 * 
 * @export
 * @interface Oauth2TokenRequestResponse
 */
export interface Oauth2TokenRequestResponse {
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    token_type?: string;
    /**
     * 
     * @type {number}
     * @memberof Oauth2TokenRequestResponse
     */
    expires_in?: number;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    refresh_token?: string;
}
/**
 * The root schema comprises the entire JSON document.
 * @export
 * @interface UserData
 */
export interface UserData {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof UserData
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    lang: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    mailAddress: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof UserData
     */
    roleType: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    userId: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Oauth2TokenPost: async (grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling apiV2Oauth2TokenPost.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling apiV2Oauth2TokenPost.');
            }
            // verify required parameter 'clientSecret' is not null or undefined
            if (clientSecret === null || clientSecret === undefined) {
                throw new RequiredError('clientSecret','Required parameter clientSecret was null or undefined when calling apiV2Oauth2TokenPost.');
            }
            const localVarPath = `/api/v2/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (redirectUri !== undefined) { 
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ProjectsGet: async (archived?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMyselfGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/myself`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 認可リクエスト
         * @param {'code'} responseType 
         * @param {string} clientId 
         * @param {string} [redirectUri] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2AccessRequestActionGet: async (responseType: 'code', clientId: string, redirectUri?: string, state?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'responseType' is not null or undefined
            if (responseType === null || responseType === undefined) {
                throw new RequiredError('responseType','Required parameter responseType was null or undefined when calling oAuth2AccessRequestActionGet.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling oAuth2AccessRequestActionGet.');
            }
            const localVarPath = `/OAuth2AccessRequest.action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Oauth2TokenRequestResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ProjectsGet(archived?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV2ProjectsGet(archived, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMyselfGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV2UsersMyselfGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 認可リクエスト
         * @param {'code'} responseType 
         * @param {string} clientId 
         * @param {string} [redirectUri] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuth2AccessRequestActionGet(responseType: 'code', clientId: string, redirectUri?: string, state?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).oAuth2AccessRequestActionGet(responseType, clientId, redirectUri, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): AxiosPromise<Oauth2TokenRequestResponse> {
            return DefaultApiFp(configuration).apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ProjectsGet(archived?: string, options?: any): AxiosPromise<Array<any>> {
            return DefaultApiFp(configuration).apiV2ProjectsGet(archived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMyselfGet(options?: any): AxiosPromise<UserData> {
            return DefaultApiFp(configuration).apiV2UsersMyselfGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 認可リクエスト
         * @param {'code'} responseType 
         * @param {string} clientId 
         * @param {string} [redirectUri] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2AccessRequestActionGet(responseType: 'code', clientId: string, redirectUri?: string, state?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).oAuth2AccessRequestActionGet(responseType, clientId, redirectUri, state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary アクセストークンリクエスト
     * @param {string} grantType 
     * @param {string} clientId 
     * @param {string} clientSecret 
     * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
     * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
     * @param {string} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトの一覧を取得
     * @param {string} [archived] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2ProjectsGet(archived?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV2ProjectsGet(archived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 認証ユーザー情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMyselfGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV2UsersMyselfGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 認可リクエスト
     * @param {'code'} responseType 
     * @param {string} clientId 
     * @param {string} [redirectUri] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public oAuth2AccessRequestActionGet(responseType: 'code', clientId: string, redirectUri?: string, state?: string, options?: any) {
        return DefaultApiFp(this.configuration).oAuth2AccessRequestActionGet(responseType, clientId, redirectUri, state, options).then((request) => request(this.axios, this.basePath));
    }
}


